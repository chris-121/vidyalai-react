[{"C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\App.js":"1","C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\index.js":"2","C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\reportWebVitals.js":"3"},{"size":1896,"mtime":1680172186473,"results":"4","hashOfConfig":"5"},{"size":517,"mtime":1680165915680,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1680165975920,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"165n35y",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\App.js",["15"],"import \"./App.css\";\r\nimport { useEffect } from \"react\";\r\nimport { fabric } from \"fabric\";\r\nimport \"./PenAndEraser.css\";\r\nfunction App() {\r\n  let canvas;\r\n  useEffect(() => {\r\n    canvas = new fabric.Canvas(\"canvas\");\r\n    canvas.setHeight(window.innerHeight);\r\n    canvas.setWidth(window.innerWidth);\r\n    canvas.isDrawingMode = true;\r\n    canvas.freeDrawingBrush.width = 3;\r\n    canvas.freeDrawingBrush.color = \"red\";\r\n  }, []);\r\n  function changeSize(e) {\r\n    canvas.freeDrawingBrush.width = e.target.value;\r\n  }\r\n  function changeColor(color) {\r\n    console.log(color);\r\n    canvas.freeDrawingBrush.color = color;\r\n  }\r\n  function eraser() {\r\n    canvas.freeDrawingBrush.color = \"#ffffff\";\r\n  }\r\n  return (\r\n    <>\r\n      <div style={{ display: \"flex\" }}>\r\n        <input\r\n          id=\"brush-size\"\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"20\"\r\n          onChange={(e) => changeSize(e)}\r\n        />\r\n        <div\r\n          className=\"round\"\r\n          onClick={() => changeColor(\"black\")}\r\n          style={{ backgroundColor: \"black\" }}\r\n        ></div>\r\n        <div\r\n          className=\"round\"\r\n          onClick={() => changeColor(\"green\")}\r\n          style={{ backgroundColor: \"green\" }}\r\n        ></div>\r\n        <div\r\n          className=\"round\"\r\n          onClick={() => changeColor(\"yellow\")}\r\n          style={{ backgroundColor: \"yellow\" }}\r\n        ></div>\r\n        <div\r\n          className=\"round\"\r\n          onClick={() => changeColor(\"blue\")}\r\n          style={{ backgroundColor: \"blue\" }}\r\n        ></div>\r\n        <div\r\n          className=\"round\"\r\n          onClick={() => changeColor(\"red\")}\r\n          style={{ backgroundColor: \"red\" }}\r\n        ></div>\r\n        <button onClick={eraser} style={{ backgroundColor: \"lightblue\" }}>\r\n          Eraser\r\n        </button>\r\n      </div>\r\n      <canvas id=\"canvas\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\index.js",[],"C:\\Users\\TOSHIBA\\Desktop\\vidyalai\\frontend-task\\src\\reportWebVitals.js",[],{"ruleId":"16","severity":1,"message":"17","line":8,"column":14,"nodeType":"18","endLine":8,"endColumn":41},"react-hooks/exhaustive-deps","Assignments to the 'canvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression"]